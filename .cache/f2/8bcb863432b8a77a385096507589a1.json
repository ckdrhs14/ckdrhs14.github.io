{"id":"page/myWeb/NetCanvas/index.html","dependencies":[{"name":"./css\\style.css","dynamic":true,"resolved":"C:\\Users\\LeeChangGon\\Desktop\\portfolio-scss\\page\\myWeb\\NetCanvas\\css\\style.css","parent":"C:\\Users\\LeeChangGon\\Desktop\\portfolio-scss\\page\\myWeb\\NetCanvas\\index.html"},{"name":"C:\\Users\\LeeChangGon\\Desktop\\portfolio-scss\\package.json","includedInParent":true,"mtime":1717246810278}],"generated":{"html":"<!doctype html>\r\n<html lang=\"kr\">\r\n <head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"Generator\" content=\"EditPlus®\">\r\n  <meta name=\"Author\" content=\"\">\r\n  <meta name=\"Keywords\" content=\"\">\r\n  <meta name=\"Description\" content=\"\">\r\n  <link href=\"/f6b9c8c1c07727752eeb6efe0d8a37df.css\" rel=\"stylesheet\">\r\n  <title>TAB</title>\r\n </head>\r\n <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n <body>\r\n\t<canvas id=\"c\"></canvas>\r\n </body>\r\n <script>// settings\n\nvar physics_accuracy = 2,\n  //반응속도\n  mouse_influence = 20,\n  //마우스속도\n  mouse_cut = 5,\n  gravity = 1500,\n  //중력크기\n  cloth_height = 40,\n  //오브젝트높이\n  cloth_width = 150,\n  //오브젝트크기\n  start_y = 20,\n  //시작높이\n  spacing = 7,\n  tear_distance = 60;\nwindow.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n  window.setTimeout(callback, 1000 / 60);\n};\nvar canvas,\n  ctx,\n  cloth,\n  boundsx,\n  boundsy,\n  mouse = {\n    down: false,\n    button: 1,\n    x: 0,\n    y: 0,\n    px: 0,\n    py: 0\n  };\nvar Point = function Point(x, y) {\n  this.x = x;\n  this.y = y;\n  this.px = x;\n  this.py = y;\n  this.vx = 0;\n  this.vy = 0;\n  this.pin_x = null;\n  this.pin_y = null;\n  this.constraints = [];\n};\nPoint.prototype.update = function (delta) {\n  if (mouse.down) {\n    var diff_x = this.x - mouse.x,\n      diff_y = this.y - mouse.y,\n      dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y);\n    if (mouse.button == 1) {\n      if (dist < mouse_influence) {\n        this.px = this.x - (mouse.x - mouse.px) * 1.8;\n        this.py = this.y - (mouse.y - mouse.py) * 1.8;\n      }\n    } else if (dist < mouse_cut) this.constraints = [];\n  }\n  this.add_force(0, gravity);\n  delta *= delta;\n  nx = this.x + (this.x - this.px) * .99 + this.vx / 2 * delta;\n  ny = this.y + (this.y - this.py) * .99 + this.vy / 2 * delta;\n  this.px = this.x;\n  this.py = this.y;\n  this.x = nx;\n  this.y = ny;\n  this.vy = this.vx = 0;\n};\nPoint.prototype.draw = function () {\n  if (!this.constraints.length) return;\n  var i = this.constraints.length;\n  while (i--) this.constraints[i].draw();\n};\nPoint.prototype.resolve_constraints = function () {\n  if (this.pin_x != null && this.pin_y != null) {\n    this.x = this.pin_x;\n    this.y = this.pin_y;\n    return;\n  }\n  var i = this.constraints.length;\n  while (i--) this.constraints[i].resolve();\n  this.x > boundsx ? this.x = 2 * boundsx - this.x : 1 > this.x && (this.x = 2 - this.x);\n  this.y < 1 ? this.y = 2 - this.y : this.y > boundsy && (this.y = 2 * boundsy - this.y);\n};\nPoint.prototype.attach = function (point) {\n  this.constraints.push(new Constraint(this, point));\n};\nPoint.prototype.remove_constraint = function (constraint) {\n  this.constraints.splice(this.constraints.indexOf(constraint), 1);\n};\nPoint.prototype.add_force = function (x, y) {\n  this.vx += x;\n  this.vy += y;\n  var round = 400;\n  this.vx = ~~(this.vx * round) / round;\n  this.vy = ~~(this.vy * round) / round;\n};\nPoint.prototype.pin = function (pinx, piny) {\n  this.pin_x = pinx;\n  this.pin_y = piny;\n};\nvar Constraint = function Constraint(p1, p2) {\n  this.p1 = p1;\n  this.p2 = p2;\n  this.length = spacing;\n};\nConstraint.prototype.resolve = function () {\n  var diff_x = this.p1.x - this.p2.x,\n    diff_y = this.p1.y - this.p2.y,\n    dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y),\n    diff = (this.length - dist) / dist;\n  if (dist > tear_distance) this.p1.remove_constraint(this);\n  var px = diff_x * diff * 0.5;\n  var py = diff_y * diff * 0.5;\n  this.p1.x += px;\n  this.p1.y += py;\n  this.p2.x -= px;\n  this.p2.y -= py;\n};\nConstraint.prototype.draw = function () {\n  ctx.moveTo(this.p1.x, this.p1.y);\n  ctx.lineTo(this.p2.x, this.p2.y);\n};\nvar Cloth = function Cloth() {\n  this.points = [];\n  var start_x = canvas.width / 2 - cloth_width * spacing / 2;\n  for (var y = 0; y <= cloth_height; y++) {\n    for (var x = 0; x <= cloth_width; x++) {\n      var p = new Point(start_x + x * spacing, start_y + y * spacing);\n      x != 0 && p.attach(this.points[this.points.length - 1]);\n      y == 0 && p.pin(p.x, p.y);\n      y != 0 && p.attach(this.points[x + (y - 1) * (cloth_width + 1)]);\n      this.points.push(p);\n    }\n  }\n};\nCloth.prototype.update = function () {\n  var i = physics_accuracy;\n  while (i--) {\n    var p = this.points.length;\n    while (p--) this.points[p].resolve_constraints();\n  }\n  i = this.points.length;\n  while (i--) this.points[i].update(.016);\n};\nCloth.prototype.draw = function () {\n  ctx.beginPath();\n  var i = cloth.points.length;\n  while (i--) cloth.points[i].draw();\n  ctx.stroke();\n};\nfunction update() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  cloth.update();\n  cloth.draw();\n  requestAnimFrame(update);\n}\nfunction start() {\n  canvas.onmousedown = function (e) {\n    mouse.button = e.which;\n    mouse.px = mouse.x;\n    mouse.py = mouse.y;\n    var rect = canvas.getBoundingClientRect();\n    mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, mouse.down = true;\n    e.preventDefault();\n  };\n  canvas.onmouseup = function (e) {\n    mouse.down = false;\n    e.preventDefault();\n  };\n  canvas.onmousemove = function (e) {\n    mouse.px = mouse.x;\n    mouse.py = mouse.y;\n    var rect = canvas.getBoundingClientRect();\n    mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, e.preventDefault();\n  };\n  canvas.oncontextmenu = function (e) {\n    e.preventDefault();\n  };\n  boundsx = canvas.width - 1;\n  boundsy = canvas.height - 1;\n  ctx.strokeStyle = '#888';\n  cloth = new Cloth();\n  update();\n}\nwindow.onload = function () {\n  canvas = document.getElementById('c');\n  ctx = canvas.getContext('2d');\n  canvas.width = 1060;\n  canvas.height = 550;\n  start();\n};</script>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"f919ff3ea7e65d5feeb9ab21898f1358","cacheData":{"env":{}}}